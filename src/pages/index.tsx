import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";

import Header from "@/components/header";

import { api, RouterOutputs } from "@/utils/api";
import { useSession } from "next-auth/react";
import NoteEditor from "@/components/noteEditor";
import NoteViewer from "@/components/noteViewer";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Note Taker T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Content />
      </main>
    </>
  );
};

type Topic = RouterOutputs["topic"]["getAll"][0];

const Content: React.FC = () => {
  const { data: sessionData } = useSession();
  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    undefined,
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectedTopic(selectedTopic ?? data[0] ?? null);
      },
    }
  );
  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );
  const createTopic = api.topic.create.useMutation({
    onSuccess: () => {
      refetchTopics();
    },
  });
  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      refetchNotes();
    },
  });
  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      refetchNotes();
    },
  });
  return (
    <div className="mx-4 mt-5 grid grid-cols-4 p-2">
      <div className="px-2">
        <div className="text font-bold uppercase tracking-wide text-primary opacity-75">
          Topics
        </div>
        <ul className="menu w-full bg-base-100 py-5">
          {topics?.map((topic) => {
            return (
              <li className="mt-1" key={topic.id}>
                <a
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    setSelectedTopic(topic);
                  }}
                >
                  {topic.title}
                </a>
              </li>
            );
          })}
        </ul>
        <div>
          <div className="text mt-5 font-bold uppercase tracking-wide text-primary opacity-75">
            Enter Topic
          </div>
          <input
            type="text"
            placeholder="Enter Topic Name..."
            className="input-primary input mt-5 w-full max-w-xs"
            onKeyDown={(e) => {
              if (e.key === "Enter") {
                createTopic.mutate({
                  title: e.currentTarget.value,
                });
                e.currentTarget.value = "";
              }
            }}
          />
        </div>
      </div>
      <div className="col-span-3">
        <div className="text m-2 font-bold uppercase tracking-wide text-primary opacity-75">
          Notes
        </div>

          <div className="">
            {
              notes && notes.map((note) => {
                return(
                  <ul key={note.id}>
                    <NoteViewer note={note} onDelete={()=> void deleteNote.mutate({id:note.id})} />
                  </ul>
                )
              })
            }
          </div>
      
        <div className="flex flex-row flex-wrap">
          <div className="text m-2 font-bold uppercase tracking-wide text-primary opacity-75">
            Take Notes
          </div>
          <NoteEditor
            onSave={({ title, content }) => {
              void createNote.mutate({
                title,
                content,
                topicId: selectedTopic?.id ?? "",
              });
            }}
          />
        </div>
      </div>
    </div>
  );
};
export default Home;
